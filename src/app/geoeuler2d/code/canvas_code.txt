

    public renderFigure(radius: number, color: string, curves: CfCurve2d[]) {

        this.painter.drawCf("#ff0000", this.cc, radius);

        for (let idx: number = 0; idx < curves.length; idx++) {

            const cvJointA: Vector2d = this.getDriverPoint(curves[idx].joins[0]);
            const cvJointB: Vector2d = this.getDriverPoint(curves[idx].joins[1]);
            const cvPoint: Vector2d  = this.getDriverPoint(curves[idx].point);
            
            this.painter.drawCf("#00ffff", cvJointA, 3);
            this.painter.drawCf("#00ffff", cvJointB, 3);
            this.painter.drawCurve2D(
                color,
                cvPoint,
                curves[idx].radius,
                curves[idx].startAngle,
                curves[idx].endAngle,
                curves[idx].directionInvClockD);
        }
    };
    
public renderMathGrappAxisXY(mathGraph: MathGrappAxisXY) {
   const lines_color: string = MathGraph.LINE_DEF_COLOR;
   const init_x: number = this.padding;
   const init_y: number = this.cc[1];
   let points: Point2D[] = [];
   for (let iter: number = 0; iter < mathGraph.dataX.length; iter++) {
       const x: number = init_x + mathGraph.dataX[iter];
       const y: number = init_y - mathGraph.dataY[iter];
       points.push(new Point2D(x, y));
   }
   this.painter.drawLines(points, lines_color);
};

/*
    
    this.graphDimension = new Dimension(
        this.dimension.width - (this.padding * 2),
        this.dimension.height - (this.padding * 2));
    *    
public fillback() {
    this.ctx.fillStyle = this.backcolor;
    this.ctx.fillRect(0, 0, this.dimension.width, this.dimension.height);
};            



public start = () => {
   this.animate();
}
public animate = async () => {
   this.clear();
   requestAnimationFrame(this.animate);
}

    public renderSceneOld(scene: GeoEuler2dScene): void {

        // get driver points
        const point_a: GrPoint2d = this.driver.getPoint(scene.points.get("pt_a")!);
        const point_b: GrPoint2d = this.driver.getPoint(scene.points.get("pt_b")!);
        const point_c: GrPoint2d = this.driver.getPoint(scene.points.get("pt_c")!);
        const point_d: GrPoint2d = this.driver.getPoint(scene.points.get("pt_d")!);

        // get driver lines
        const line_ab: GrLine2d = this.driver.getLine(scene.lines.get("line_ab")!);
        const line_cd: GrLine2d = this.driver.getLine(scene.lines.get("line_cd")!);

        // get driver circunferences
        const circ_a: GrCircunf2d = this.driver.getCircunf(scene.circunfs.get("circ_a")!);
        const circ_b: GrCircunf2d = this.driver.getCircunf(scene.circunfs.get("circ_b")!);
        const circ_c: GrCircunf2d = this.driver.getCircunf(scene.circunfs.get("circ_c")!);
        const circ_d: GrCircunf2d = this.driver.getCircunf(scene.circunfs.get("circ_d")!);

        this.painter.drawPoint(point_a);
        this.painter.drawPoint(point_b);
        this.painter.drawPoint(point_c);
        this.painter.drawPoint(point_d);
        this.painter.drawPointsLine(line_ab.color, line_ab.point_0, line_ab.point_1);
        this.painter.drawPointsLine(line_cd.color, line_cd.point_0, line_cd.point_1);        
        this.painter.drawCf(circ_a);
        this.painter.drawCf(circ_b);
        this.painter.drawCf(circ_c);
        this.painter.drawCf(circ_d);

    }